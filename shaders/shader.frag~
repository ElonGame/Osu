#version 130
uniform vec3 camera;
uniform vec3 light0;
uniform vec3 light1;
uniform vec3 light2;
uniform vec3 worldLighting;
uniform vec3 ambientLighting;

uniform mat4 modelMatrix;
uniform mat3 normalMatrix;

uniform vec3 torchVector;

uniform int mode;

uniform sampler2D textureSampler;
uniform sampler2D textureSamplerNormal;
uniform sampler2DShadow shadowMap;

uniform vec4 modelLighting;

uniform vec2 mirrorMode;

in vec3 pass_Colour;
in vec4 modelPosition;
in vec4 eyePosition;
//in vec3 pass_N;
in vec3 normal;
in vec2 pass_UV;
in vec4 quat;
in vec4 ShadowCoord;
//in float diffuse;
out vec4 out_Color;



vec3 qrot(vec4 q, vec3 v)       {
        return v + 2.0*cross(q.xyz, cross(q.xyz,v) + q.w*v);
}

void main(void)
{

if (mirrorMode.x>0.5 && mirrorMode.x<1.5 && modelPosition.y<mirrorMode.y){discard;}


vec3 fragColour=pass_Colour;
vec3 fragNormal=normal;
vec3 lightDir0 = light0;// - vec3(modelPosition);
vec3 lightDir1 = light1;// - vec3(modelPosition);
vec3 lightDir2 = light2;// - vec3(modelPosition);

if ((mode & 8)==8){
	//if (texture2D( textureSampler,pass_UV).a<0.9) discard;
	//else
	fragColour = texture2D( textureSampler,pass_UV).rgb;
}
vec3 adjNormal;
vec2 texcol;
if ((mode & 16)==16){
	vec3 texCol = texture2D( textureSamplerNormal, pass_UV ).rgb;
	adjNormal = normalize(vec3( 2*(texCol.r-0.5),2*(texCol.b-0.5),2*(texCol.g-0.5)));
	fragNormal = normalMatrix * qrot(quat,adjNormal);
}

//float distance1=length(lightDir1)/2;
lightDir0=normalize(lightDir0);
lightDir1=normalize(lightDir1);
lightDir2=normalize(lightDir2);

int lit=1;
float falloff=1;
/*float cosangle=dot(torchVector,lightDir1);
if (cosangle>0.9){
	lit=1;
	cosangle=5*(cosangle-0.85);
	//if (cosangle>0.95)falloff=pow(cosangle,2);
	//else falloff=pow(cosangle,10);
	falloff=pow(cosangle,2);
}
else{
	lit=1;
	falloff=0.02;
}*/

float dotProduct0=1;
float dotProduct1=1;
float dotProduct2=1;
vec3 specularReflection=vec3(0,0,0);
if((mode & 4)==4)
{
	float specFalloff=falloff;
	if ((mode & 32) == 32){specFalloff*=texture2D( textureSamplerNormal, pass_UV ).a;}
	dotProduct0 = dot(normalize(fragNormal),lightDir0);
	dotProduct1 = dot(normalize(fragNormal),lightDir1);
	dotProduct2 = dot(normalize(fragNormal),lightDir2);
	vec3 eyeVec = normalize(camera-vec3(modelPosition));
	if (dotProduct0 > 0 && modelLighting.z>0.1) // light source on the wrong side?
	{

		
		
		/*// * Car light reflection
		eyeVec.y=0;
		eyeVec=normalize(eyeVec);
		vec3 rvec=reflect(-lightDir1, fragNormal);
		rvec.y=0;
		rvec=normalize(rvec);
		
		if (dot(eyeVec,rvec) > 0.99){
			specularReflection = modelLighting.z * worldLighting
			* pow(max(0.0, dot(rvec, eyeVec)),
				  10);
		}*/
		
		
		specularReflection += specFalloff * worldLighting * modelLighting.z
		* pow(max(0,dot(reflect(-lightDir0, fragNormal), eyeVec)),
			  modelLighting.w);
			  
		
		
	}
	if (dotProduct1 > 0 && modelLighting.z>0.1) // light source on the wrong side?
	{
		specularReflection += specFalloff * worldLighting * modelLighting.z
		* pow(max(0,dot(reflect(-lightDir1, fragNormal), eyeVec)),
			  modelLighting.w);
	}
	if (dotProduct2 > 0 && modelLighting.z>0.1) // light source on the wrong side?
	{
		specularReflection += specFalloff * worldLighting * modelLighting.z
		* pow(max(0,dot(reflect(-lightDir2, fragNormal), eyeVec)),
			  modelLighting.w);
	}
}
vec3 ambient = ambientLighting*modelLighting.x;
vec3 diffuse = modelLighting.y * (max(0,dotProduct0)+max(0,dotProduct1)+max(0,dotProduct2)) * vec3(1,1,1) * 0.33;
//dotProduct = pow(dotProduct,2);
if((mode & 2)==2 || (mode & 8)==8){
	ambient *= fragColour;
	diffuse *= fragColour;
}

diffuse*=falloff;

diffuse=mod(float(gl_FragCoord.x),5.0);


//float shadow = texture( shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z)/ShadowCoord.w) );

if (mirrorMode.x>1.5){
	out_Color = vec4(specularReflection,pow(specularReflection.r,10)*0.7);
}
else out_Color = vec4(ambient+diffuse+specularReflection,1);

/*if (mirrorMode.x>0){
	out_Color.r+=1;
}*/





}
